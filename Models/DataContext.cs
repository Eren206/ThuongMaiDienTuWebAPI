// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ThuongMaiDienTuWebAPI.Models
{
    public partial class DataContext : DbContext
    {
        public DataContext()
        {
        }

        public DataContext(DbContextOptions<DataContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Feature> Features { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<OrderStatus> OrderStatuses { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductArticle> ProductArticles { get; set; }
        public virtual DbSet<ProductFeature> ProductFeatures { get; set; }
        public virtual DbSet<ProductImage> ProductImages { get; set; }
        public virtual DbSet<Review> Reviews { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Status> Statuses { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.ToTable("Account");

                entity.Property(e => e.AccountId)
                    .ValueGeneratedNever()
                    .HasColumnName("account_id");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("password");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("phone_number");

                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("role_id")
                    .IsFixedLength();

                entity.HasOne(d => d.PhoneNumberNavigation)
                    .WithMany(p => p.Accounts)
                    .HasPrincipalKey(p => p.PhoneNumber)
                    .HasForeignKey(d => d.PhoneNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Account_Customer");

                entity.HasOne(d => d.PhoneNumber1)
                    .WithMany(p => p.Accounts)
                    .HasPrincipalKey(p => p.PhoneNumber)
                    .HasForeignKey(d => d.PhoneNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Account_Employee");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Account_Role");
            });

            modelBuilder.Entity<Address>(entity =>
            {
                entity.ToTable("Address");

                entity.Property(e => e.AddressId)
                    .ValueGeneratedNever()
                    .HasColumnName("address_id");

                entity.Property(e => e.CityId)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("city_id")
                    .IsFixedLength();

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.DetailAddress)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("detail_address");

                entity.Property(e => e.DistrictId)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("district_id")
                    .IsFixedLength();

                entity.Property(e => e.IsDefault).HasColumnName("is_default");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("phone_number");

                entity.Property(e => e.WardId)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("ward_id")
                    .IsFixedLength();

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Address_Customer");
            });

            modelBuilder.Entity<Brand>(entity =>
            {
                entity.ToTable("Brand");

                entity.Property(e => e.BrandId)
                    .ValueGeneratedNever()
                    .HasColumnName("brand_id");

                entity.Property(e => e.LogoPath)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("logo_path");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Cart>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.ProductId });

                entity.ToTable("Cart");

                entity.HasIndex(e => e.CartId, "UK_Cart_id")
                    .IsUnique();

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(10)
                    .HasColumnName("product_id")
                    .IsFixedLength();

                entity.Property(e => e.CartId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("cart_id");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cart_Customer");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cart_Product");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("Customer");

                entity.HasIndex(e => e.PhoneNumber, "UK_Cus_phone_number")
                    .IsUnique();

                entity.Property(e => e.CustomerId)
                    .ValueGeneratedNever()
                    .HasColumnName("customer_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.ModifiedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("modified_at");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("phone_number");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("Employee");

                entity.HasIndex(e => e.PhoneNumber, "UK_phone_number")
                    .IsUnique();

                entity.Property(e => e.EmployeeId)
                    .ValueGeneratedNever()
                    .HasColumnName("employee_id");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("email");

                entity.Property(e => e.EmployeeStatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("employee_status");

                entity.Property(e => e.Firstname)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("firstname");

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("gender");

                entity.Property(e => e.HireDate)
                    .HasColumnType("date")
                    .HasColumnName("hire_date");

                entity.Property(e => e.IdentityNo)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("identity_no");

                entity.Property(e => e.Lastname)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("lastname");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("phone_number");
            });

            modelBuilder.Entity<Feature>(entity =>
            {
                entity.ToTable("Feature");

                entity.Property(e => e.FeatureId)
                    .ValueGeneratedNever()
                    .HasColumnName("feature_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.OrderId)
                    .ValueGeneratedNever()
                    .HasColumnName("order_id");

                entity.Property(e => e.AddressId).HasColumnName("address_id");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("order_date");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("money")
                    .HasColumnName("total_amount");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.AddressId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Address");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Customer");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasKey(e => new { e.OrderId, e.ProductId });

                entity.ToTable("OrderDetail");

                entity.HasIndex(e => e.OrderDetailId, "UK_order_detail_id")
                    .IsUnique();

                entity.Property(e => e.OrderId).HasColumnName("order_id");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(10)
                    .HasColumnName("product_id")
                    .IsFixedLength();

                entity.Property(e => e.IsReview).HasColumnName("is_review");

                entity.Property(e => e.OrderDetailId).HasColumnName("order_detail_id");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.UnitPrice).HasColumnName("unit_price");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_Orders");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_Product");
            });

            modelBuilder.Entity<OrderStatus>(entity =>
            {
                entity.HasKey(e => e.OrdStatusId);

                entity.ToTable("OrderStatus");

                entity.Property(e => e.OrdStatusId)
                    .ValueGeneratedNever()
                    .HasColumnName("ord_status_id");

                entity.Property(e => e.DateUpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("date_update");

                entity.Property(e => e.OrderId).HasColumnName("order_id");

                entity.Property(e => e.StatusId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("status_id")
                    .IsFixedLength();

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderStatuses)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderStatus_Orders");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.OrderStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderStatus_Status");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("Product");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(10)
                    .HasColumnName("product_id")
                    .IsFixedLength();

                entity.Property(e => e.BrandId).HasColumnName("brand_id");

                entity.Property(e => e.CoolingCapacity)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("cooling_capacity");

                entity.Property(e => e.HeatCapacity)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("heat_capacity");

                entity.Property(e => e.IndoorDimension)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("indoor_dimension");

                entity.Property(e => e.IndoorWarranty)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("indoor_warranty");

                entity.Property(e => e.IndoorWeight).HasColumnName("indoor_weight");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("name");

                entity.Property(e => e.NumbersOfCooling).HasColumnName("numbers_of_cooling");

                entity.Property(e => e.OutdoorDimension)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("outdoor_dimension");

                entity.Property(e => e.OutdoorWarranty)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("outdoor_warranty");

                entity.Property(e => e.OutdoorWeight).HasColumnName("outdoor_weight");

                entity.Property(e => e.PowerComsumption).HasColumnName("power_comsumption");

                entity.Property(e => e.Price)
                    .HasColumnType("money")
                    .HasColumnName("price");

                entity.Property(e => e.ProductStatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("product_status");

                entity.Property(e => e.RadiatorMaterial)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("radiator_material");

                entity.Property(e => e.RealeaseDate)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("realease_date");

                entity.HasOne(d => d.Brand)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.BrandId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product_Brand");
            });

            modelBuilder.Entity<ProductArticle>(entity =>
            {
                entity.HasKey(e => e.ArticleId);

                entity.ToTable("ProductArticle");

                entity.Property(e => e.ArticleId)
                    .ValueGeneratedNever()
                    .HasColumnName("article_id");

                entity.Property(e => e.ArContent)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("ar_content");

                entity.Property(e => e.ArHeading)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("ar_heading");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("date")
                    .HasColumnName("created_date");

                entity.Property(e => e.EmployeeId).HasColumnName("employee_id");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("product_id")
                    .IsFixedLength();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ProductArticles)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductArticle_Employee");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductArticles)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductArticle_Product");
            });

            modelBuilder.Entity<ProductFeature>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.FeatureId });

                entity.ToTable("ProductFeature");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(10)
                    .HasColumnName("product_id")
                    .IsFixedLength();

                entity.Property(e => e.FeatureId).HasColumnName("feature_id");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .HasColumnName("description");

                entity.HasOne(d => d.Feature)
                    .WithMany(p => p.ProductFeatures)
                    .HasForeignKey(d => d.FeatureId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductFeature_Feature");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductFeatures)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductFeature_Product");
            });

            modelBuilder.Entity<ProductImage>(entity =>
            {
                entity.HasKey(e => e.ProImageId);

                entity.ToTable("ProductImage");

                entity.Property(e => e.ProImageId)
                    .ValueGeneratedNever()
                    .HasColumnName("pro_image_id");

                entity.Property(e => e.ImagePath)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("image_path");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("product_id")
                    .IsFixedLength();

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductImages)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductImage_Product");
            });

            modelBuilder.Entity<Review>(entity =>
            {
                entity.HasIndex(e => e.ReviewId, "UK_review_id")
                    .IsUnique();

                entity.Property(e => e.ReviewId).HasColumnName("review_id");

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("comment");

                entity.Property(e => e.OrderDetail).HasColumnName("order_detail");

                entity.Property(e => e.RatingPoint).HasColumnName("rating_point");

                entity.HasOne(d => d.OrderDetailNavigation)
                    .WithMany(p => p.Reviews)
                    .HasPrincipalKey(p => p.OrderDetailId)
                    .HasForeignKey(d => d.OrderDetail)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reviews_OrderDetail");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("Role");

                entity.Property(e => e.RoleId)
                    .HasMaxLength(10)
                    .HasColumnName("role_id")
                    .IsFixedLength();

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("role_name");
            });

            modelBuilder.Entity<Status>(entity =>
            {
                entity.ToTable("Status");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(10)
                    .HasColumnName("status_id")
                    .IsFixedLength();

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasColumnName("description");

                entity.Property(e => e.Status1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("status");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}